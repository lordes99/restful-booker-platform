on:
  push:
    branches:
      - main
jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del codice
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SonarQube Analysis
        run: |
          mvn clean compile
          mvn sonar:sonar \
            -Dsonar.projectKey=lordes99_restful-booker-platform \
            -Dsonar.organization=lordes99 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=${{ secrets.SONARQUBE_TOKEN }} \
            -Dsonar.branch.name=main \
            -Dsonar.java.binaries=target/classes \
            -X  # Abilita i log di debug
  build-and-push:
    runs-on: self-hosted
    strategy:
      matrix:
        service: [auth, booking, report, room, branding, message, assets]  # Elenco dei servizi
    steps:
      - name: Checkout del codice
        uses: actions/checkout@v4

      - name: Setup di Java e Maven (solo se necessario)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'  # Java version

      - name: Setup di Node.js (solo per assets)
        if: matrix.service == 'assets'
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Build frontend con npm (solo per assets)
        if: matrix.service == 'assets'
        run: |
          cd assets/js
          npm install
          npm run build

      - name: Build API con Maven (per Java e assets)
        run: |
          if [ "${{ matrix.service }}" == "assets" ]; then
            cd ${{ matrix.service }}/api
            mvn install -DskipTests # Evitiamo "clean install" per non rimuovere gli assets
          else
            mvn clean install -DskipTests
          fi

      - name: Login su Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build dell'immagine per ${{ matrix.service }}
        run: docker build -t rafdanna28/spme-${{ matrix.service }}:${{ github.sha }} ./${{ matrix.service }}

      - name: Push su Docker Hub
        run: docker push rafdanna28/spme-${{ matrix.service }}:${{ github.sha }}
  update-and-deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout del codice
        uses: actions/checkout@v4

      - name: Imposta il percorso del file di deploy
        run: |
          echo "DEPLOY_PATH=/home/lord-spme/kube-yaml/deploy.yml" >> $GITHUB_ENV

      - name: Modifica il file di deploy con i nuovi tag immagine
        run: |
          sed -i 's|\(rafdanna28/spme-booking:\)[^ ]*|\1${{ github.sha }}|g' $DEPLOY_PATH
          sed -i 's|\(rafdanna28/spme-room:\)[^ ]*|\1${{ github.sha }}|g' $DEPLOY_PATH
          sed -i 's|\(rafdanna28/spme-branding:\)[^ ]*|\1${{ github.sha }}|g' $DEPLOY_PATH
          sed -i 's|\(rafdanna28/spme-assets:\)[^ ]*|\1${{ github.sha }}|g' $DEPLOY_PATH
          sed -i 's|\(rafdanna28/spme-auth:\)[^ ]*|\1${{ github.sha }}|g' $DEPLOY_PATH
          sed -i 's|\(rafdanna28/spme-report:\)[^ ]*|\1${{ github.sha }}|g' $DEPLOY_PATH
          sed -i 's|\(rafdanna28/spme-message:\)[^ ]*|\1${{ github.sha }}|g' $DEPLOY_PATH

      - name: Configura kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Applica il deployment su Kubernetes
        run: /snap/bin/microk8s.kubectl apply -f $DEPLOY_PATH --namespace=spme
